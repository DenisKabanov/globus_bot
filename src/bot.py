#===============================================================================
# —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
#===============================================================================

import json
import os # –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞)
import random # –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
import numpy as np
import pandas as pd
from pyxdameraulevenshtein import damerau_levenshtein_distance # –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π –≤—Ç–æ—Ä–æ–π
from dotenv import load_dotenv # –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
# import logging # –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è


load_dotenv() # –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN") # –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATA_PATH = os.getenv("DATA_PATH")
DB_PATH = os.getenv("DB_PATH")
EXTRA_PATH = os.getenv("EXTRA_PATH")


db = pd.DataFrame()
if os.path.exists(f"{DB_PATH}/users.json"):
    db = pd.read_json(f"{DB_PATH}/users.json", lines=True)
else:
    variables = {
        "user_name": str(),
        "chat_id": int(),
        "current_country": str(),
        "current_answer": str(),
        "countries_history": list(),
        "score_total" : int(),
        "score_best" : int(),
        "score_countries" : dict()
    }

    db = pd.DataFrame(columns=variables, index=[])
    db.to_json(f"{DB_PATH}/users.json", orient='records', lines=True, force_ascii=False)


data = {}
for country_name in os.listdir(DATA_PATH):
    data[country_name] = {}
    data[country_name]["flag"] = f"{DATA_PATH}/{country_name}/flag.png"
    data[country_name]["map"] = f"{DATA_PATH}/{country_name}/map.png"
    data[country_name]["description"] = {}
    
    with open(f"{DATA_PATH}/{country_name}/description.txt", "r", encoding="utf-8") as f:
        for hint in ["–ü—Ä–∏—Ä–æ–¥–∞", "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–ö—É–ª—å—Ç—É—Ä–∞", "–Ø–∑—ã–∫", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç", "–ì–æ—Ä–æ–¥–∞"]:
            data[country_name]["description"][hint] = f.readline()[len(hint) + 2:]
            f.readline()
        
        data[country_name]["description"]["–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"] = "".join(f.readlines(-1))
countries_all = set(data.keys()) # set —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω


button1 = KeyboardButton("–∑–∞–≥–∞–¥–∞–π")
button2 = KeyboardButton("—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ç—Ä–∞–Ω–µ")
kb_basic = ReplyKeyboardMarkup(
    keyboard=[
        [button1, button2]
    ],
    resize_keyboard=True  # Optional: Resizes the keyboard to fit the screen
)


button_help1 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ –ø—Ä–∏—Ä–æ–¥—É (-10 –±–∞–ª–ª)")
button_help2 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (-10 –±–∞–ª–ª)")
button_help3 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ –∫—É–ª—å—Ç—É—Ä—É (-10 –±–∞–ª–ª)")
button_help4 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ —è–∑—ã–∫ (-10 –±–∞–ª–ª)")
button_help5 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç (-10 –±–∞–ª–ª)")
button_help6 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ –≥–æ—Ä–æ–¥–∞ (-10 –±–∞–ª–ª)")
button_help7 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (-40 –±–∞–ª–ª–∞)")
button_help8 = KeyboardButton("–ø–æ–¥—Å–∫–∞–∂–∏ –±—É–∫–≤—ã (-20 –±–∞–ª–ª–∞)")
button_surrender = KeyboardButton("—Å–¥–∞—é—Å—å")
kb_help = ReplyKeyboardMarkup(
    keyboard=[
        [button_help1, button_help2],
        [button_help3, button_help4],
        [button_help5, button_help6],
        [button_help7, button_help8],
        [button_surrender]
    ],
    resize_keyboard=True  # Optional: Resizes the keyboard to fit the screen
)


button_reset = KeyboardButton(text="–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
kb_reset = ReplyKeyboardMarkup(
    keyboard=[
        [button_reset]
    ],
    resize_keyboard=True  # Optional: Resizes the keyboard to fit the screen
)


def save_db(db: pd.DataFrame) -> None:
    with open(f"{DB_PATH}/users.json", mode='w', encoding='utf-8') as file:
        db.to_json(file, orient='records', lines=True, force_ascii=False)


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    global db
    chat_id = update.message.chat.id
    user_name = update.message.chat.first_name

    if (chat_id not in db["chat_id"].values):
        new_user = pd.DataFrame({"user_name": [user_name], "chat_id": [chat_id], "current_country": [""], "current_answer": [""],
                                 "countries_history": [[]], "score_total": [0], "score_best": [0], "score_countries": [{}]})
        db = pd.concat([db, new_user], ignore_index=True)
        save_db(db)

    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ù–∞—á–Ω–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É? \n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb_basic)


def help(update: Update, context: CallbackContext):
   update.message.reply_text(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\
1) '<b>–∑–∞–≥–∞–¥–∞–π</b>' ‚Äî –¥–ª—è –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã\n\
2) '<b>–ø–æ–¥—Å–∫–∞–∂–∏ *</b>', –≥–¥–µ * —ç—Ç–æ —Å–ª–æ–≤–æ –∏–∑ (–ø—Ä–∏—Ä–æ–¥—É, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫—É–ª—å—Ç—É—Ä—É, —è–∑—ã–∫, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç, –≥–æ—Ä–æ–¥–∞, —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è) ‚Äî –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\
3) '<b>—Å–¥–∞—é—Å—å</b>' ‚Äî —á—Ç–æ–±—ã –ø—Ä–∏–∑–Ω–∞—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ–ª–∞–≥\n\
4) '<b>—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ç—Ä–∞–Ω–µ *</b>', –≥–¥–µ * —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã ‚Äî —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø–æ–≤–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π, –±–µ–∑ –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –≤–º–µ—Å—Ç–æ * –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–ª—é–±–æ–π')\n\
5) –Ω—É –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ —Å–∞–º–æ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã</b>, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–≥–∞–¥–∞–Ω–∞", parse_mode='HTML') # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (text) –≤ —á–∞—Ç (chat_id) 


def clear_history(update: Update, context: CallbackContext):
    global db
    chat_id = update.message.chat.id

    db.loc[db["chat_id"] == chat_id, "current_country"] = ""
    db.loc[db["chat_id"] == chat_id, "current_answer"] = ""
    db.loc[db["chat_id"] == chat_id, "countries_history"].iloc[0].clear()
    db.loc[db["chat_id"] == chat_id, "score_total"] = 0
    db.loc[db["chat_id"] == chat_id, "score_best"] = 0
    db.loc[db["chat_id"] == chat_id, "score_countries"].iloc[0].clear()
    
    save_db(db)

    update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –æ—á–∏—â–µ–Ω–∞!", reply_markup=kb_basic)


def send_flag(update: Update, context: CallbackContext) -> None:
    global db
    chat_id = update.message.chat.id

    countries_history = set(db.loc[db["chat_id"] == chat_id, "countries_history"].iloc[0])
    if len(countries_history) == len(countries_all):
        gif_animation = open(f"{EXTRA_PATH}/win.gif", "rb")
        context.bot.send_animation(chat_id=chat_id, animation=gif_animation, caption=f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?üéâ", reply_markup=kb_reset)
        return

    country_name = random.choices(list(countries_all - countries_history), k=1)[0]
    
    flag_path = data[country_name]["flag"]

    # update.message.reply_text(f"{country_name}") # DEBUG
    context.bot.send_photo(chat_id=chat_id, photo=open(flag_path, "rb"), caption=f"–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç {len(country_name)} —Å–∏–º–≤–æ–ª–æ–≤!", reply_markup=kb_help)

    db.loc[db["chat_id"] == chat_id, "current_country"] = country_name
    db.loc[db["chat_id"] == chat_id, "score_countries"].iloc[0][country_name] = 100

    current_answer = ["*" for i in range(len(country_name))]
    for idx, char in enumerate(country_name):
        if char in [" ", "‚Äî", "-", "'"]:
            current_answer[idx] = char
    db.loc[db["chat_id"] == chat_id, "current_answer"] = "".join(current_answer)

    save_db(db)


def answer_flag(update: Update, context: CallbackContext) -> None:
    global db
    chat_id = update.message.chat.id

    answer_given = update.message.text
    answer_expected = db.loc[db["chat_id"] == chat_id, "current_country"].iloc[0]
    score_countries = db.loc[db["chat_id"] == chat_id, "score_countries"].iloc[0]
    # current_score = score_countries[answer_expected]
    current_country_score = score_countries[answer_expected]
    total_score = db.loc[db["chat_id"] == chat_id, "score_total"].iloc[0]
    best_score = db.loc[db["chat_id"] == chat_id, "best_score"].iloc[0]

    if answer_expected == "":
        update.message.reply_text(f"–í—ã –µ—â—ë –Ω–µ –∑–∞–≥–∞–¥–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É! \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb_basic)
        return
    
    # if answer_expected in countries_hint.keys():
    #     current_score = current_score - countries_hint[answer_expected]
            
    if (answer_given.lower() == answer_expected.lower()) or \
       ((answer_expected == "–ö–∏—Ç–∞–π—Å–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞") and (answer_given.lower() == "–∫–∏—Ç–∞–π")) or \
       ((answer_expected == "–ö–æ—Ä–µ–π—Å–∫–∞—è –ù–∞—Ä–æ–¥–Ω–æ-–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞") and (answer_given.lower() == "–∫–Ω–¥—Ä")) or \
       ((answer_expected == "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ê—Ä–∞–±—Å–∫–∏–µ –≠–º–∏—Ä–∞—Ç—ã") and (answer_given.lower() == "–æ–∞—ç")) or \
       ((answer_expected == "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ—Ä–µ—è") and (answer_given.lower() == "—é–∂–Ω–∞—è –∫–æ—Ä–µ—è")) or \
       ((answer_expected == "–°–∞—Ö–∞—Ä—Å–∫–∞—è –ê—Ä–∞–±—Å–∫–∞—è –î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞") and (answer_given.lower() == "—Å–∞–¥—Ä")) or \
       ((answer_expected == "–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã –ê–º–µ—Ä–∏–∫–∏") and (answer_given.lower() == "—Å—à–∞")) or \
       ((answer_expected == "–¢—É—Ä–µ—Ü–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–æ–≥–æ –ö–∏–ø—Ä–∞") and (answer_given.lower() == "—Ç—Ä—Å–∫")) or \
       ((answer_expected == "–Æ–∂–Ω–æ-–ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞") and (answer_given.lower() == "—é–∞—Ä")):
        map_path = data[answer_expected]["map"]
        description = data[answer_expected]["description"]["–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"]

        new_total_score = total_score + max(0, current_country_score)
        db.loc[db["chat_id"] == chat_id, "score_total"] = new_total_score
        if new_total_score > best_score:
            db.loc[db["chat_id"] == chat_id, "score_best"] = new_total_score

        update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å—Ç—Ä–∞–Ω–∞ {answer_expected} —É–≥–∞–¥–∞–Ω–∞! –ó–∞ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {current_country_score}. –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {new_total_score}.")
        context.bot.send_photo(chat_id=chat_id, photo=open(map_path, "rb"), caption=f"{description}")
        update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb_basic)

        db.loc[db["chat_id"] == chat_id, "current_country"] = ""
        db.loc[db["chat_id"] == chat_id, "current_answer"] = ""
        db.loc[db["chat_id"] == chat_id, "countries_history"].iloc[0].append(answer_expected)
        db.loc[db["chat_id"] == chat_id, "score_countries"].iloc[0].pop(answer_expected, None)
    else:
        db.loc[db["chat_id"] == chat_id, "score_countries"].iloc[0][answer_expected] -= 1
        
        correct_letters = 0 # —á–∏—Å–ª–æ —Å–æ–≤–ø–∞–≤—à–∏—Ö –±—É–∫–≤
        current_answer = list(db.loc[db["chat_id"] == chat_id, "current_answer"].iloc[0])

        for i in range(min(len(answer_given), len(answer_expected))): # –∏–¥—ë–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
            if answer_given[i].lower() == answer_expected[i].lower(): # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±—É–∫–≤—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ö
                correct_letters += 1 # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                current_answer[i] = answer_given[i]
        current_answer = "".join(current_answer)
        
        db.loc[db["chat_id"] == chat_id, "current_answer"] = current_answer

        update.message.reply_text(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π {correct_letters}: {current_answer}. \n–ü–æ–ø—ã—Ç–∞–π—Å—è –µ—â—ë —Ä–∞–∑!", reply_markup=kb_help)
    save_db(db)


def surrender(update: Update, context: CallbackContext) -> None:
    global db
    chat_id = update.message.chat.id

    answer_expected = db.loc[db["chat_id"] == chat_id, "current_country"].iloc[0]

    if answer_expected == "":
        update.message.reply_text(f"–í—ã –µ—â—ë –Ω–µ –∑–∞–≥–∞–¥–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É! \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb_basic)
    else:
        map_path = data[answer_expected]["map"]
        description = data[answer_expected]["description"]["–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"]
        context.bot.send_photo(chat_id=chat_id, photo=open(map_path, "rb"), caption=f"–í–∞–º –±—ã–ª–∞ –∑–∞–≥–∞–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {answer_expected}. \n{description}")
        update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb_basic)

        db.loc[db["chat_id"] == chat_id, "current_country"] = ""
        db.loc[db["chat_id"] == chat_id, "current_answer"] = ""
        save_db(db)


def hint(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat.id
    hint_type = update.message.text[9:]

    country_name = db.loc[db["chat_id"] == chat_id, "current_country"].iloc[0]
    name_len = len(country_name)

    if damerau_levenshtein_distance(hint_type, "–ø—Ä–∏—Ä–æ–¥—É") <= 2:
        hint = data[country_name]["description"]["–ü—Ä–∏—Ä–æ–¥–∞"]
    elif damerau_levenshtein_distance(hint_type, "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å") <= 2:
        hint = data[country_name]["description"]["–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]
    elif damerau_levenshtein_distance(hint_type, "–∫—É–ª—å—Ç—É—Ä—É") <= 2:
        hint = data[country_name]["description"]["–ö—É–ª—å—Ç—É—Ä–∞"]
    elif damerau_levenshtein_distance(hint_type, "—è–∑—ã–∫") <= 2:
        hint = data[country_name]["description"]["–Ø–∑—ã–∫"]
    elif damerau_levenshtein_distance(hint_type, "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç") <= 2:
        hint = data[country_name]["description"]["–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç"]
    elif damerau_levenshtein_distance(hint_type, "–≥–æ—Ä–æ–¥–∞") <= 2:
        hint = data[country_name]["description"]["–ì–æ—Ä–æ–¥–∞"]
    elif damerau_levenshtein_distance(hint_type, "—á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è") <= 2:
        start_idx, end_idx = sorted(random.sample(range(name_len), k=2)) # —Å –∫–∞–∫–æ–π –ø–æ –∫–∞–∫—É—é –±—É–∫–≤—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
        hint = "" # –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞
        for i in range(name_len): # –∏–¥—ë–º –ø–æ —á–∏—Å–ª—É –±—É–∫–≤ –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
            if start_idx <= i <= end_idx: # –µ—Å–ª–∏ –±—É–∫–≤–∞ –≤ –Ω—É–∂–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                hint += country_name[i] # –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Å–∞–º—É
            else: # –∏–Ω–∞—á–µ
                hint += "*" # –∑–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –±—É–∫–≤—É
    elif damerau_levenshtein_distance(hint_type, "–±—É–∫–≤—ã") <= 2:
        idx_to_show = sorted(random.sample(range(name_len), k=int(name_len/3))) # —Å –∫–∞–∫–æ–π –ø–æ –∫–∞–∫—É—é –±—É–∫–≤—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
        hint = "" # –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞
        for i in range(name_len): # –∏–¥—ë–º –ø–æ —á–∏—Å–ª—É –±—É–∫–≤ –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
            if (i in idx_to_show) or (country_name[i] in [" ", "‚Äî", "-", "'"]): # –µ—Å–ª–∏ –±—É–∫–≤–∞ –≤ –Ω—É–∂–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
                hint += country_name[i] # –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Å–∞–º—É
            else: # –∏–Ω–∞—á–µ
                hint += "*" # –∑–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –±—É–∫–≤—É

    update.message.reply_text(hint, reply_markup=kb_help)


def tell_about(update: Update, context: CallbackContext) -> None:
    global db
    chat_id = update.message.chat.id

    country_name = update.message.text[17:].strip()
    countries_history = set(db.loc[db["chat_id"] == chat_id, "countries_history"].iloc[0])

    if (len(country_name) <= 2) or (damerau_levenshtein_distance(country_name, "–ª—é–±–æ–π") <= 2):
        country_name = random.choices(list(countries_all - countries_history), k=1)[0]
        flag_path = data[country_name]["flag"]
        map_path = data[country_name]["map"]
        description = data[country_name]["description"]["–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"]
    else:
        dist_best = 3
        country_name_closest = ""
        for country in countries_all:
            dist = damerau_levenshtein_distance(country_name, country)
            if dist < dist_best:
                country_name_closest = country
                dist_best = dist

        if country_name_closest == "":
            update.message.reply_text(f"–í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ {country_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=kb_basic)
            return
        else:  
            flag_path = data[country_name_closest]["flag"]
            map_path = data[country_name_closest]["map"]
            description = data[country_name_closest]["description"]["–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"]
    
    media = [
        InputMediaPhoto(open(flag_path, "rb"), caption=description),
        InputMediaPhoto(open(map_path, "rb"))
    ]

    update.message.reply_media_group(media)
    update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb_basic)

# def error(update: Update, context: CallbackContext) -> None:
#     logger.warning(f'Update {update} caused error {context.error}')


def main():
    updater = Updater(TOKEN) # API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º

    dispatcher = updater.dispatcher # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help))
    dispatcher.add_handler(CommandHandler("clear_history", clear_history))
    dispatcher.add_handler(MessageHandler(Filters.regex(r"[–û|–æ]—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"), clear_history))
    # dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, repeat))
    dispatcher.add_handler(MessageHandler(Filters.regex(r"[–ó|–∑]–∞–≥–∞–¥–∞–π"), send_flag))
    dispatcher.add_handler(MessageHandler(Filters.regex(r"[–ü|–ø]–æ–¥—Å–∫–∞–∂–∏ .*"), hint))
    dispatcher.add_handler(MessageHandler(Filters.regex(r"[–°|—Å]–¥–∞—é—Å—å"), surrender))
    dispatcher.add_handler(MessageHandler(Filters.regex(r"[–†|—Ä]–∞—Å—Å–∫–∞–∂–∏ –æ"), tell_about))
    dispatcher.add_handler(MessageHandler(Filters.text, answer_flag)) 
    
    # dispatcher.add_error_handler(error)

    updater.start_polling() # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    updater.idle()

if __name__ == '__main__':
    main()